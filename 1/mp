#! /usr/bin/python
import argparse
import sys
import fileinput
help_message = """
usage: mp [-h] [--version] [-o OUTPUT_FILE] [-f INPUT_FILE] [-s] [-v]

matrix multiplier

optional arguments:
  -h, --help      show this help message and exit
  --version       version (default: False)
  -o OUTPUT_FILE  output file (default: None)
  -f INPUT_FILE   input file (default: None)
  -s              no output on the screen (default: False)
  -v, --verbose   input and output will be on the screen (default: False)"""
 
def matrix_product(A,B):
    rowA = len(A)
    rowB = len(B)
    colA = len(A[0])
    colB = len(B[0])

    result = []
    for i in range(rowA):
        result_row = []
        for k in range(colB):
            result_row.append(0)
        result.append(result_row)

    for i in range(rowA):
        for j in range(colB):
            for k in range(colA):
                result[i][j] += A[i][k] * B[k][j]
    return result


def run(args):
    f = args.input_file

    if args.version == True:
        print("Matrix producter:1.0.0")
        sys.exit("come back again")
    else:
        screen_output_value = args.screen_output_value
        screen_in_out_value = args.screen_in_out_value

        if args.input_file != None:
            input_file = open(args.input_file, "r")
            text = input_file.read()
            text = text.rstrip('\n')
            if text[0] != "[" and text[-1] != "]":
                sys.exit("you should insert matrices")
            matrix_list = []

            how_many_matrix = 0
            for i in text:
                if i == "*":
                    how_many_matrix += 1
            if how_many_matrix == 0:
                sys.exit("you should insert matrices, more than one.")

            mlist = text.strip()

            matrix_list = mlist.split("*")
            for i in matrix_list:
                for j in range(len(i)):
                    if type(i[j]) == type(int()) or i[j] == "]" or i[j] == "[" or i[j] == ",":
                        pass
                    elif i[j] == ".":
                        try:
                            if type(eval(i[j+1])) == type(int()):
                                pass
                        except:
                            sys.exit("you can only put numbers in matrices")
                    else:
                        try:
                            if type(eval(i[j])) == type(int()):
                                pass
                        except:
                            sys.exit("you can only put numbers in matrices")
            a = 0
            b = 0
            c = 0
            matrix_types = []
            for i in matrix_list:
                for char in i:
                    if char == "[":
                        a += 1
                    elif char == "]":
                        b += 1
                    elif char == ",":
                        c += 1
                c = c+1
                if a != b:
                    sys.exit("your row's are wrong")
                c = c / (a - 1)
                c = int(c)
                mat_type = [a-1,c]
                matrix_types.append(mat_type)
                del mat_type
                a = 0
                b = 0
                c = 0
            for i in range(len(matrix_types)):
                if i == len(matrix_types) - 1:
                    break
                elif matrix_types[i][1] != matrix_types[i+1][0]:
                    sys.exit("your matrix types are not good for multiplying")
            true_mat_list = []
            for i in matrix_list:
                try:
                    if type(eval(i)) == type([]):
                        true_mat_list.append(eval(i))
                except:
                    sys.exit("your input is wrong")
            res = []
            s = 0
            try:
                for i in range(how_many_matrix):
                    s += 1
                    if res == []:
                        res = matrix_product(true_mat_list[0],true_mat_list[1])
                    else:
                        res = matrix_product(res,true_mat_list[i])

                if screen_output_value == True:
                    if screen_in_out_value == True:
                        print("matrices")
                        print(true_mat_list)
                        print(res)
                    else:
                        print("matrices: ")
                        print(true_mat_list)
                else:
                    if screen_in_out_value == True:
                        print("matrices: ")
                        print(true_mat_list)
                        print(res)
                    else:
                        print("matrices: ")
                        print(res)

                if args.output_file == None:
                    pass
                else:
                    f2 = open(args.output_file,"w+")
                    print(res,file=f2)

                input_file.close()
                if args.output_file != None:
                    f2.close()

            except:
                sys.exit("some unexpected mistake")

        else:
            s = args.screen_output_value
            v = args.screen_in_out_value
            o = args.output_file
            if s == False and v == False and o == None:
                someany = sys.stdin.readlines()
                someany.append("a")
                print("hey")
                del s, v, f, o
                i = 0
                text_list = []
                for line in someany:
                    text_list.append(line)
                if len(text_list) == 2:
                    text = text_list[0]
                else:
                    sys.exit(help_message)
                text.rstrip("\n")
                if text[0] != "[" and text[-1] != "]":
                    sys.exit("you should insert matrices")
                matrix_list = []

                how_many_matrix = 0
                for i in text:
                    if i == "*":
                        how_many_matrix += 1
                if how_many_matrix == 0:
                    sys.exit("you should insert matrices, more than one.")

                mlist = text.strip()

                matrix_list = mlist.split("*")
                for i in matrix_list:
                    for j in range(len(i)):
                        if type(i[j]) == type(int()) or i[j] == "]" or i[j] == "[" or i[j] == ",":
                            pass
                        elif i[j] == ".":
                            try:
                                if type(eval(i[j+1])) == type(int()):
                                    pass
                            except:
                                sys.exit("you can only put numbers in matrices")
                        else:
                            try:
                                if type(eval(i[j])) == type(int()):
                                    pass
                            except:
                                sys.exit("you can only put numbers in matrices")
                a = 0
                b = 0
                c = 0
                matrix_types = []
                for i in matrix_list:
                    for char in i:
                        if char == "[":
                            a += 1
                        elif char == "]":
                            b += 1
                        elif char == ",":
                            c += 1
                    c = c+1
                    if a != b:
                        sys.exit("your row's are wrong")
                    c = c / (a - 1)
                    c = int(c)
                    mat_type = [a-1,c]
                    matrix_types.append(mat_type)
                    del mat_type
                    a = 0
                    b = 0
                    c = 0
                for i in range(len(matrix_types)):
                    if i == len(matrix_types) - 1:
                        break
                    elif matrix_types[i][1] != matrix_types[i+1][0]:
                        sys.exit("your matrix types are not good for multiplying")
                true_mat_list = []
                for i in matrix_list:
                    try:
                        if type(eval(i)) == type([]):
                            true_mat_list.append(eval(i))
                    except:
                        sys.exit("your input is wrong")
                res = []
                s = 0
                try:
                    for i in range(how_many_matrix):
                        s += 1
                        if res == []:
                            res = matrix_product(true_mat_list[0],true_mat_list[1])
                        else:
                            res = matrix_product(res,true_mat_list[i])
                    print(res)

                except:
                    sys.exit("some unexpected mistake")
            
            
def main():
    parser=argparse.ArgumentParser(description="matrix multiplier",
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("--version",help="version",dest="version",action="store_true")
    parser.add_argument("-o",help="output file",dest="output_file",type=str)
    parser.add_argument("-f",help="input file",dest="input_file",type=str)
    parser.add_argument("-s",help="no output on the screen",dest="screen_output_value",action="store_true")
    parser.add_argument("-v", "--verbose",help="input and output will be on the screen",dest="screen_in_out_value",action="store_true")
    parser.set_defaults(func=run)
    args=parser.parse_args()
    args.func(args)

if __name__ == "__main__":
    main()
